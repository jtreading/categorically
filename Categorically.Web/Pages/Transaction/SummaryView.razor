@page "/summary"
@using Categorically.DataAccess.Models;
@using Categorically.Tasks;
@using Radzen
@using Radzen.Blazor
@using Categorically.Web.Components
@inject IUserTasks userTasks
@inject ICategoryTasks categoryTasks
@inject ITransactionTasks transactionTasks
@inject NavigationManager NavigationManager

<h3>Summary</h3>

<RadzenStack Orientation="Orientation.Horizontal" HorizontalAlign="HorizontalAlignment.Center" class="mb-3">
    <RadzenDropDown @bind-Value="@selectedUserId" Data="@users" TextProperty="UserName" ValueProperty="UserId">
        <label>User:</label>
    </RadzenDropDown>

    <RadzenDatePicker @bind-Value="@startDate">
        <label>Start Date:</label>
    </RadzenDatePicker>

    <RadzenDatePicker @bind-Value="@endDate">
        <label>End Date:</label>
    </RadzenDatePicker>
    <div class="ml-auto">
        <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@UpdateTransactionList">
            <span class="oi oi-loop" />
            Update
        </RadzenButton>
        <a href="addtransaction">
            <RadzenButton ButtonStyle="ButtonStyle.Secondary">
                <span class="oi oi-plus" />
                Add Transaction
            </RadzenButton>
        </a>
    </div>
</RadzenStack>

<div class="row">
    <div class="col-sm-12 col-lg-8 offset-lg-2 my-5">
        <RadzenChart>
            <RadzenPieSeries Data="@summaryData" Title="Summary" CategoryProperty="CategoryName" ValueProperty="Amount">
                <RadzenSeriesDataLabels Visible="true" />
            </RadzenPieSeries>
        </RadzenChart>

        <AddTxn categoryTasks="@categoryTasks" navigationManager="@NavigationManager" userTasks="@userTasks" transactionTasks="@transactionTasks"> </AddTxn>

    </div>
</div>

@code {
    DateTime startDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    DateTime endDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddMonths(1).AddDays(-1);
    int selectedUserId;

    List<User> users = new();
    List<SummaryItem> summaryData = new();

    async Task UpdateTransactionList()
    {
        users = await userTasks.GetAllUsersAsync();
        summaryData = await transactionTasks.GetSummaryItemsAsync(selectedUserId, startDate, endDate);
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateTransactionList();
    }
}
