@page "/summary"
@using Categorically.DataAccess.Models;
@using Categorically.Tasks;
@using Radzen
@using Radzen.Blazor
@inject IUserTasks userTasks
@inject ITransactionTasks transactionTasks

<h3>SummaryView</h3>

<style>
    /* Apply consistent font */
    .consistent-font {
        font-family: Arial, sans-serif;
    }

    /* Adjust button style */
    .styled-button {
        vertical-align: middle;
        height: 38px;
    }

    /* Adjust chart size */
    .larger-chart {
        width: 75%;
        margin: auto;
    }
</style>

<div class="container consistent-font">
    <RadzenStack Orientation="Orientation.Horizontal" HorizontalAlign="HorizontalAlignment.Center" class="mb-3">
        <RadzenDropDown @bind-Value="@selectedUserId" Data="@users" TextProperty="UserName" ValueProperty="UserId">
            <label>User:</label>
        </RadzenDropDown>

        <RadzenDatePicker @bind-Value="@startDate">
            <label>Start Date:</label>
        </RadzenDatePicker>

        <RadzenDatePicker @bind-Value="@endDate">
            <label>End Date:</label>
        </RadzenDatePicker>
        <div class="ml-auto">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Click="@UpdateTransactionList">
                <span class="oi oi-loop" />
                Update
            </RadzenButton>
            <a href="addtransaction">
                <RadzenButton ButtonStyle="ButtonStyle.Secondary">
                    <span class="oi oi-plus" />
                    Add Transaction
                </RadzenButton>
            </a>
        </div>
    </RadzenStack>

    <div class="row">
        <div class="col-sm-12 col-lg-8 offset-lg-2 my-5">
            <RadzenChart class="larger-chart">
                <RadzenPieSeries Data="@summaryData" Title="Summary" CategoryProperty="CategoryName" ValueProperty="Amount">
                    <RadzenSeriesDataLabels Visible="true" />
                </RadzenPieSeries>
            </RadzenChart>
        </div>
    </div>
</div>

@code {
    DateTime startDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    DateTime endDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddMonths(1).AddDays(-1);
    int selectedUserId;

    List<User> users = new();
    List<SummaryItem> summaryData = new();

    async Task UpdateTransactionList()
    {
        users = await userTasks.GetAllUsersAsync();
        summaryData = await transactionTasks.GetSummaryItemsAsync(selectedUserId, startDate, endDate);
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateTransactionList();
    }
}
