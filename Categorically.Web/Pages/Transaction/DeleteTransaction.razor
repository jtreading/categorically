@page "/DeleteTransaction/{transactionId:int}"
@using Categorically.Tasks
@using Categorically.DataAccess.Models
@inject ITransactionTasks transactionTasks
@inject NavigationManager navigationManager

<h2>Delete Transaction</h2>
<hr />
<h3>Are you sure you want to delete this transaction?</h3>

@if (transaction is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class=" col-md-8">
            <div class="form-group">
                <label>Transaction ID:</label>
                <label>@transaction.TransactionId</label>
            </div>
            <div class="form-group">
                <label>Transaction Date:</label>
                <label>@transaction.TransactionDate.ToShortDateString()</label>
            </div>
            <div class="form-group">
                <label>Amount:</label>
                <label>@transaction.Amount</label>
            </div>
            <div class="form-group">
                <label>Charged By Name:</label>
                <label>@transaction.ChargedByName</label>
            </div>
            <div class="form-group">
                <label>Description:</label>
                <label>@transaction.Description</label>
            </div>
            <div class="form-group">
                <label>Category:</label>
                <label>@transaction.Category?.CategoryName</label>
            </div>
            <div class="form-group">
                <label>User:</label>
                <label>@transaction.User?.UserName</label>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-danger" @onclick="@DeleteThisTransaction" value="Delete" />
                <input type="button" class="btn btn-primary" @onclick="@Cancel" value="Cancel" />
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int transactionId { get; set; }

    Transaction transaction = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await transactionTasks.GetTransactionAsync(transactionId);
        if (response != null)
        {
            transaction = response;
        }
    }

    protected async Task DeleteThisTransaction()
    {
        await transactionTasks.DeleteTransactionAsync(transaction);
        navigationManager.NavigateTo("Transactions");
    }

    void Cancel()
    {
        navigationManager.NavigateTo("Transactions");
    }
}
