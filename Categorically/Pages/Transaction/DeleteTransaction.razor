@page "/DeleteTransaction/{TransactionId}"
@using Categorically.Data
@inject TransactionService transactionService
@inject NavigationManager NavigationManager

<h2>Delete Transaction</h2>
<hr />
<h3>Are you sure you want to delete this transaction?</h3>

@if (Transaction is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class=" col-md-8">
            <div class="form-group">
                <label>Transaction ID:</label>
                <label>@Transaction.TransactionId</label>
            </div>
            <div class="form-group">
                <label>Transaction Date:</label>
                <label>@Transaction.TransactionDate.ToShortDateString()</label>
            </div>
            <div class="form-group">
                <label>Amount:</label>
                <label>@Transaction.Amount</label>
            </div>
            <div class="form-group">
                <label>Charged By Name:</label>
                <label>@Transaction.ChargedByName</label>
            </div>
            <div class="form-group">
                <label>Description:</label>
                <label>@Transaction.Description</label>
            </div>
            <div class="form-group">
                <label>Category:</label>
                <label>@Transaction.Category?.CategoryName</label>
            </div>
            <div class="form-group">
                <label>User:</label>
                <label>@Transaction.User.UserName</label>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-danger" @onclick="@DeleteThisTransaction" value="Delete" />
                <input type="button" class="btn btn-primary" @onclick="@Cancel" value="Cancel" />
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string TransactionId { get; set; }
    Transaction Transaction;

    protected override async Task OnInitializedAsync()
    {
        if (Int32.TryParse(TransactionId, out int txnId))
        {
            Transaction = await transactionService.GetTransactionAsync(txnId);
        }
    }

    protected async Task DeleteThisTransaction()
    {
        await transactionService.DeleteTransactionAsync(Transaction);
        NavigationManager.NavigateTo("Transactions");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("Transactions");
    }
}
